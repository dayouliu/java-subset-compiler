
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.math.BigInteger;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\073\005\000\002\005" +
    "\005\000\002\005\002\000\002\010\004\000\002\010\002" +
    "\000\002\006\005\000\002\007\005\000\002\007\003\000" +
    "\002\004\005\000\002\004\003\000\002\011\005\000\002" +
    "\011\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\003\004\000\002\003\002\000\002\013\003\000" +
    "\002\013\003\000\002\014\012\000\002\015\011\000\002" +
    "\064\004\000\002\064\002\000\002\063\004\000\002\063" +
    "\002\000\002\062\004\000\002\062\002\000\002\065\004" +
    "\000\002\065\004\000\002\065\004\000\002\065\004\000" +
    "\002\065\002\000\002\066\004\000\002\066\002\000\002" +
    "\067\011\000\002\067\011\000\002\071\011\000\002\071" +
    "\011\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\020\005\000\002" +
    "\020\005\000\002\070\010\000\002\072\006\000\002\072" +
    "\010\000\002\022\005\000\002\022\003\000\002\022\002" +
    "\000\002\021\004\000\002\030\005\000\002\024\004\000" +
    "\002\024\002\000\002\026\004\000\002\026\006\000\002" +
    "\025\004\000\002\025\005\000\002\025\004\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\031\007\000\002\031\011\000\002\032\007\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\002\000\002\034\003\000\002\034\002\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\002\000" +
    "\002\036\013\000\002\055\007\000\002\055\007\000\002" +
    "\054\007\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\007\000\002\040\006\000" +
    "\002\040\006\000\002\040\006\000\002\041\006\000\002" +
    "\041\006\000\002\041\006\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\044\005\000\002\044\005\000\002\044\005\000" +
    "\002\052\005\000\002\052\003\000\002\052\002\000\002" +
    "\042\005\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\046\005\000\002\047\010\000" +
    "\002\047\006\000\002\050\006\000\002\050\006\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\004\000\002\057" +
    "\004\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\024\006\ufffe\007\ufffe\010\006\011\ufffe\014" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002\000\004" +
    "\002\u011d\001\002\000\022\006\ufffc\007\014\011\ufffc\014" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\004" +
    "\077\007\001\002\000\064\005\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\063\ufff7\077\ufff7\001\002\000\006\026\011\030\012\001" +
    "\002\000\022\006\uffff\007\uffff\011\uffff\014\uffff\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\001\002\000\004\077\013\001" +
    "\002\000\064\005\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8\063\ufff8\077" +
    "\ufff8\001\002\000\004\077\007\001\002\000\022\006\ufffc" +
    "\007\014\011\ufffc\014\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\001\002\000\020\006\022\011\021\014\uffed\050\025" +
    "\051\020\052\031\053\024\001\002\000\004\002\uffec\001" +
    "\002\000\036\006\ufff2\011\ufff2\014\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\056\ufff2\064\ufff2\065\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\077\ufff2\001\002\000\022\006\ufff4\011\ufff4" +
    "\013\u0102\014\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\001" +
    "\002\000\036\006\ufff0\011\ufff0\014\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\056\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\077\ufff0\001\002\000\004\002\uffeb\001\002" +
    "\000\036\006\uffef\011\uffef\014\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\056\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\077\uffef\001\002\000\036\006\ufff3\011\ufff3\014" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\056\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\077\ufff3\001\002\000" +
    "\004\014\034\001\002\000\004\002\000\001\002\000\036" +
    "\006\022\011\033\014\uffed\050\025\051\020\052\031\053" +
    "\024\056\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\077\uffed\001\002\000\036\006\ufff1\011\ufff1\014\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\056\ufff1\064\ufff1\065\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\077\ufff1\001\002\000\022\014" +
    "\uffee\056\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\077\uffee\001\002\000\036\006\ufff4\011\ufff4\014\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\056\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\067\ufff4\070\ufff4\077\ufff4\001\002\000\004\077" +
    "\035\001\002\000\010\004\037\005\uffe7\022\uffe7\001\002" +
    "\000\006\005\042\022\uffe3\001\002\000\004\077\007\001" +
    "\002\000\010\005\uffe8\022\uffe8\030\012\001\002\000\004" +
    "\022\047\001\002\000\004\077\007\001\002\000\010\022" +
    "\ufff5\027\ufff5\030\012\001\002\000\006\022\uffe4\027\045" +
    "\001\002\000\004\077\007\001\002\000\010\022\ufff6\027" +
    "\ufff6\030\012\001\002\000\036\006\uffde\011\uffde\023\uffde" +
    "\050\uffde\051\uffde\052\uffde\053\uffde\056\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\077\uffde\001\002\000\036" +
    "\006\022\011\033\023\056\050\025\051\020\052\031\053" +
    "\024\056\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\077\uffed\001\002\000\036\006\uffe2\011\uffe2\023\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\056\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\077\uffe2\001\002\000\036\006" +
    "\uffe0\011\uffe0\023\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\056\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\077" +
    "\uffe0\001\002\000\020\056\061\064\060\065\057\066\067" +
    "\067\066\070\070\077\063\001\002\000\036\006\uffe1\011" +
    "\uffe1\023\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\056\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\077\uffe1\001" +
    "\002\000\036\006\uffdf\011\uffdf\023\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\056\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\070\uffdf\077\uffdf\001\002\000\004\002\uffea\001\002" +
    "\000\010\021\uffd7\024\uffd7\077\uffd7\001\002\000\010\021" +
    "\uffd6\024\uffd6\077\uffd6\001\002\000\004\077\374\001\002" +
    "\000\006\024\166\077\uffd2\001\002\000\012\020\370\024" +
    "\ufff7\030\ufff7\077\ufff7\001\002\000\004\077\074\001\002" +
    "\000\004\077\uffd0\001\002\000\010\021\uffd4\024\uffd4\077" +
    "\uffd4\001\002\000\010\021\uffd5\024\uffd5\077\uffd5\001\002" +
    "\000\010\021\uffd3\024\uffd3\077\uffd3\001\002\000\010\024" +
    "\072\030\012\077\uffd1\001\002\000\004\025\073\001\002" +
    "\000\050\021\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\046\uffce\047\uffce\063\uffce\077" +
    "\uffce\001\002\000\010\020\076\026\075\045\077\001\002" +
    "\000\036\006\uffcc\011\uffcc\023\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\056\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\077\uffcc\001\002\000\020\021\uffc8\064\060\065" +
    "\057\066\067\067\066\070\070\077\007\001\002\000\032" +
    "\017\125\020\105\032\120\044\107\071\102\073\110\074" +
    "\121\075\130\076\112\077\007\100\113\101\116\001\002" +
    "\000\052\021\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\046\uff8b\047" +
    "\uff8b\063\uff8b\001\002\000\054\021\uff8c\024\uff8c\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\045\263\046\uff8c\047\uff8c\063\uff8c\001\002\000" +
    "\052\021\uff6f\024\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f" +
    "\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\037" +
    "\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\046\uff6f\047\uff6f" +
    "\063\uff6f\001\002\000\046\021\uff94\025\uff94\026\uff94\027" +
    "\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94" +
    "\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\046\uff94\047" +
    "\uff94\063\uff94\001\002\000\040\026\262\031\145\032\136" +
    "\033\143\034\141\035\147\036\152\037\140\040\146\041" +
    "\150\042\142\043\151\046\137\047\153\063\144\001\002" +
    "\000\044\017\125\020\105\032\120\044\107\064\060\065" +
    "\057\066\067\067\066\070\070\071\102\073\110\074\121" +
    "\075\130\076\112\077\007\100\113\101\116\001\002\000" +
    "\046\021\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\046\uffa6\047\uffa6\063\uffa6\001\002" +
    "\000\032\017\125\020\105\032\120\044\107\071\102\073" +
    "\110\074\121\075\130\076\112\077\007\100\113\101\116" +
    "\001\002\000\052\021\uff6c\024\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\046" +
    "\uff6c\047\uff6c\063\uff6c\001\002\000\046\021\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\046\uffa5\047\uffa5\063\uffa5\001\002\000\052\021\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041" +
    "\uff88\042\uff88\043\uff88\046\uff88\047\uff88\063\uff88\001\002" +
    "\000\052\021\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030" +
    "\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e" +
    "\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\046\uff6e\047" +
    "\uff6e\063\uff6e\001\002\000\046\021\uff96\025\uff96\026\uff96" +
    "\027\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\046\uff96" +
    "\047\uff96\063\uff96\001\002\000\052\021\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\046\uff87\047\uff87\063\uff87\001\002\000\052" +
    "\021\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031" +
    "\uff6d\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d" +
    "\040\uff6d\041\uff6d\042\uff6d\043\uff6d\046\uff6d\047\uff6d\063" +
    "\uff6d\001\002\000\052\021\uff97\024\223\025\uff97\026\uff97" +
    "\027\uff97\030\224\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\046\uff97\047\uff97\063\uff97\001\002\000\032\017\125\020" +
    "\105\032\120\044\107\071\102\073\110\074\121\075\130" +
    "\076\112\077\007\100\113\101\116\001\002\000\052\021" +
    "\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b" +
    "\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040" +
    "\uff6b\041\uff6b\042\uff6b\043\uff6b\046\uff6b\047\uff6b\063\uff6b" +
    "\001\002\000\046\021\uff95\025\uff95\026\uff95\027\uff95\031" +
    "\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95" +
    "\040\uff95\041\uff95\042\uff95\043\uff95\046\uff95\047\uff95\063" +
    "\uff95\001\002\000\046\021\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\046\uffa4\047\uffa4" +
    "\063\uffa4\001\002\000\052\021\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043" +
    "\uff89\046\uff89\047\uff89\063\uff89\001\002\000\016\064\060" +
    "\065\057\066\067\067\066\070\070\077\007\001\002\000" +
    "\054\021\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045\205\046\uff8a" +
    "\047\uff8a\063\uff8a\001\002\000\056\020\133\021\uff98\024" +
    "\132\025\uff98\026\uff98\027\uff98\030\012\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\045\134\046\uff98\047\uff98\063\uff98" +
    "\001\002\000\052\021\uff6a\024\uff6a\025\uff6a\026\uff6a\027" +
    "\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a" +
    "\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\046" +
    "\uff6a\047\uff6a\063\uff6a\001\002\000\052\021\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\046\uff86\047\uff86\063\uff86\001\002\000" +
    "\032\017\125\020\105\032\120\044\107\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\034\017\125\020\105\021\uff8e\032\120\044\107" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\032\017\125\020\105\032\120" +
    "\044\107\071\102\073\110\074\121\075\130\076\112\077" +
    "\007\100\113\101\116\001\002\000\046\021\uff93\025\uff93" +
    "\026\uff93\027\uff93\031\145\032\136\033\143\034\141\035" +
    "\147\036\152\037\140\040\146\041\150\042\142\043\151" +
    "\046\137\047\153\063\144\001\002\000\032\017\125\020" +
    "\105\032\120\044\107\071\102\073\110\074\121\075\130" +
    "\076\112\077\007\100\113\101\116\001\002\000\032\017" +
    "\125\020\105\032\120\044\107\071\102\073\110\074\121" +
    "\075\130\076\112\077\007\100\113\101\116\001\002\000" +
    "\032\017\125\020\105\032\120\044\107\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\032\017\125\020\105\032\120\044\107\071\102" +
    "\073\110\074\121\075\130\076\112\077\007\100\113\101" +
    "\116\001\002\000\032\017\125\020\105\032\120\044\107" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\032\017\125\020\105\032\120" +
    "\044\107\071\102\073\110\074\121\075\130\076\112\077" +
    "\007\100\113\101\116\001\002\000\016\064\060\065\057" +
    "\066\067\067\066\070\070\077\007\001\002\000\032\017" +
    "\125\020\105\032\120\044\107\071\102\073\110\074\121" +
    "\075\130\076\112\077\007\100\113\101\116\001\002\000" +
    "\032\017\125\020\105\032\120\044\107\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\032\017\125\020\105\032\120\044\107\071\102" +
    "\073\110\074\121\075\130\076\112\077\007\100\113\101" +
    "\116\001\002\000\032\017\125\020\105\032\120\044\107" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\032\017\125\020\105\032\120" +
    "\044\107\071\102\073\110\074\121\075\130\076\112\077" +
    "\007\100\113\101\116\001\002\000\032\017\125\020\105" +
    "\032\120\044\107\071\102\073\110\074\121\075\130\076" +
    "\112\077\007\100\113\101\116\001\002\000\032\017\125" +
    "\020\105\032\120\044\107\071\102\073\110\074\121\075" +
    "\130\076\112\077\007\100\113\101\116\001\002\000\046" +
    "\021\uff74\025\uff74\026\uff74\027\uff74\031\145\032\136\033" +
    "\143\034\141\035\147\036\152\037\140\040\146\041\150" +
    "\042\142\043\151\046\uff74\047\uff74\063\144\001\002\000" +
    "\042\021\uff7b\025\uff7b\026\uff7b\027\uff7b\031\145\032\136" +
    "\033\143\034\141\035\147\037\140\040\146\042\142\043" +
    "\151\046\uff7b\047\uff7b\063\144\001\002\000\034\021\uff76" +
    "\025\uff76\026\uff76\027\uff76\031\145\032\136\033\143\034" +
    "\141\035\147\036\uff76\041\uff76\046\uff76\047\uff76\001\002" +
    "\000\042\021\uff78\025\uff78\026\uff78\027\uff78\031\145\032" +
    "\136\033\143\034\141\035\147\037\140\040\146\042\142" +
    "\043\151\046\uff78\047\uff78\063\144\001\002\000\046\021" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\046\uff7c\047\uff7c\063\uff7c\001\002\000\034" +
    "\021\uff79\025\uff79\026\uff79\027\uff79\031\145\032\136\033" +
    "\143\034\141\035\147\036\uff79\041\uff79\046\uff79\047\uff79" +
    "\001\002\000\046\021\uff80\025\uff80\026\uff80\027\uff80\031" +
    "\uff80\032\uff80\033\143\034\141\035\147\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\046\uff80\047\uff80\063" +
    "\uff80\001\002\000\004\024\166\001\002\000\046\021\uff72" +
    "\025\uff72\026\uff72\027\uff72\031\uff72\032\uff72\033\uff72\034" +
    "\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\046\uff72\047\uff72\063\uff72\001\002\000\052\021" +
    "\uff73\024\072\025\uff73\026\uff73\027\uff73\030\012\031\uff73" +
    "\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040" +
    "\uff73\041\uff73\042\uff73\043\uff73\046\uff73\047\uff73\063\uff73" +
    "\001\002\000\004\025\167\001\002\000\050\021\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\046\uffcf\047\uffcf\063\uffcf\077\uffcf\001\002\000\046" +
    "\021\uff7e\025\uff7e\026\uff7e\027\uff7e\031\uff7e\032\uff7e\033" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\043\uff7e\046\uff7e\047\uff7e\063\uff7e\001\002\000" +
    "\034\021\uff77\025\uff77\026\uff77\027\uff77\031\145\032\136" +
    "\033\143\034\141\035\147\036\uff77\041\uff77\046\uff77\047" +
    "\uff77\001\002\000\046\021\uff7d\025\uff7d\026\uff7d\027\uff7d" +
    "\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\046\uff7d\047\uff7d" +
    "\063\uff7d\001\002\000\034\021\uff7a\025\uff7a\026\uff7a\027" +
    "\uff7a\031\145\032\136\033\143\034\141\035\147\036\uff7a" +
    "\041\uff7a\046\uff7a\047\uff7a\001\002\000\046\021\uff75\025" +
    "\uff75\026\uff75\027\uff75\031\145\032\136\033\143\034\141" +
    "\035\147\036\152\037\140\040\146\041\150\042\142\043" +
    "\151\046\uff75\047\uff75\063\144\001\002\000\046\021\uff7f" +
    "\025\uff7f\026\uff7f\027\uff7f\031\uff7f\032\uff7f\033\143\034" +
    "\141\035\147\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\046\uff7f\047\uff7f\063\uff7f\001\002\000\042\021" +
    "\uff8f\027\201\031\145\032\136\033\143\034\141\035\147" +
    "\036\152\037\140\040\146\041\150\042\142\043\151\046" +
    "\137\047\153\063\144\001\002\000\004\021\200\001\002" +
    "\000\052\021\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030" +
    "\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\046\uff83\047" +
    "\uff83\063\uff83\001\002\000\034\017\125\020\105\021\uff8e" +
    "\032\120\044\107\071\102\073\110\074\121\075\130\076" +
    "\112\077\007\100\113\101\116\001\002\000\004\021\uff90" +
    "\001\002\000\040\025\204\031\145\032\136\033\143\034" +
    "\141\035\147\036\152\037\140\040\146\041\150\042\142" +
    "\043\151\046\137\047\153\063\144\001\002\000\054\021" +
    "\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\045\uff81\046\uff81\047\uff81" +
    "\063\uff81\001\002\000\032\017\125\020\105\032\120\044" +
    "\107\071\102\073\110\074\121\075\130\076\112\077\007" +
    "\100\113\101\116\001\002\000\046\021\uff91\025\uff91\026" +
    "\uff91\027\uff91\031\145\032\136\033\143\034\141\035\147" +
    "\036\152\037\140\040\146\041\150\042\142\043\151\046" +
    "\137\047\153\063\144\001\002\000\010\020\215\024\214" +
    "\030\012\001\002\000\004\024\211\001\002\000\032\017" +
    "\125\020\105\032\120\044\107\071\102\073\110\074\121" +
    "\075\130\076\112\077\007\100\113\101\116\001\002\000" +
    "\040\025\213\031\145\032\136\033\143\034\141\035\147" +
    "\036\152\037\140\040\146\041\150\042\142\043\151\046" +
    "\137\047\153\063\144\001\002\000\052\021\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\046\uffa9\047\uffa9\063\uffa9\001\002\000" +
    "\032\017\125\020\105\032\120\044\107\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\034\017\125\020\105\021\uff8e\032\120\044\107" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\004\021\217\001\002\000\052" +
    "\021\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\046\uffa7\047\uffa7\063" +
    "\uffa7\001\002\000\040\025\221\031\145\032\136\033\143" +
    "\034\141\035\147\036\152\037\140\040\146\041\150\042" +
    "\142\043\151\046\137\047\153\063\144\001\002\000\052" +
    "\021\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\046\uffa8\047\uffa8\063" +
    "\uffa8\001\002\000\046\021\uff71\025\uff71\026\uff71\027\uff71" +
    "\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037" +
    "\uff71\040\uff71\041\uff71\042\uff71\043\uff71\046\uff71\047\uff71" +
    "\063\uff71\001\002\000\032\017\125\020\105\032\120\044" +
    "\107\071\102\073\110\074\121\075\130\076\112\077\007" +
    "\100\113\101\116\001\002\000\004\077\225\001\002\000" +
    "\056\020\226\021\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036" +
    "\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\045\uff85" +
    "\046\uff85\047\uff85\063\uff85\001\002\000\034\017\125\020" +
    "\105\021\uff8e\032\120\044\107\071\102\073\110\074\121" +
    "\075\130\076\112\077\007\100\113\101\116\001\002\000" +
    "\004\021\230\001\002\000\052\021\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\046\uff84\047\uff84\063\uff84\001\002\000\040\025" +
    "\232\031\145\032\136\033\143\034\141\035\147\036\152" +
    "\037\140\040\146\041\150\042\142\043\151\046\137\047" +
    "\153\063\144\001\002\000\054\021\uff82\024\uff82\025\uff82" +
    "\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\045\uff82\046\uff82\047\uff82\063\uff82\001\002\000" +
    "\046\021\uff70\025\uff70\026\uff70\027\uff70\031\uff70\032\uff70" +
    "\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\046\uff70\047\uff70\063\uff70\001\002" +
    "\000\040\021\256\031\145\032\136\033\143\034\141\035" +
    "\147\036\152\037\140\040\146\041\150\042\142\043\151" +
    "\046\137\047\153\063\144\001\002\000\006\021\247\024" +
    "\166\001\002\000\004\021\241\001\002\000\050\020\133" +
    "\021\uff98\024\240\030\012\031\uff98\032\uff98\033\uff98\034" +
    "\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98" +
    "\043\uff98\045\134\046\uff98\047\uff98\063\uff98\001\002\000" +
    "\034\017\125\020\105\025\073\032\120\044\107\071\102" +
    "\073\110\074\121\075\130\076\112\077\007\100\113\101" +
    "\116\001\002\000\026\017\125\020\105\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\052\021\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\046\uff8c" +
    "\047\uff8c\063\uff8c\001\002\000\046\021\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\046" +
    "\uff9c\047\uff9c\063\uff9c\001\002\000\052\021\uff9d\024\223" +
    "\025\uff9d\026\uff9d\027\uff9d\030\224\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\046\uff9d\047\uff9d\063\uff9d\001\002\000" +
    "\052\021\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\046\uff8a\047\uff8a" +
    "\063\uff8a\001\002\000\054\020\133\021\uff9e\024\132\025" +
    "\uff9e\026\uff9e\027\uff9e\030\012\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\046\uff9e\047\uff9e\063\uff9e\001\002\000\030" +
    "\017\125\020\105\032\253\071\102\073\110\074\121\075" +
    "\130\076\112\077\007\100\113\101\116\001\002\000\046" +
    "\021\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\046\uffa0\047\uffa0\063\uffa0\001\002\000" +
    "\046\021\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\046\uffa1\047\uffa1\063\uffa1\001\002" +
    "\000\052\021\uffa2\024\223\025\uffa2\026\uffa2\027\uffa2\030" +
    "\224\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\046\uffa2\047" +
    "\uffa2\063\uffa2\001\002\000\032\017\125\020\105\032\120" +
    "\044\107\071\102\073\110\074\121\075\130\076\112\077" +
    "\007\100\113\101\116\001\002\000\054\020\133\021\uffa3" +
    "\024\132\025\uffa3\026\uffa3\027\uffa3\030\012\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\046\uffa3\047\uffa3\063\uffa3\001" +
    "\002\000\046\021\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f" +
    "\032\uff9f\033\143\034\141\035\147\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\046\uff9f\047\uff9f\063\uff9f" +
    "\001\002\000\076\017\125\020\105\021\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\046\uff8d\047\uff8d\063\uff8d\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\046\021\uff99\025\uff99\026\uff99\027\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\042\uff99\043\uff99\046\uff99\047\uff99\063\uff99" +
    "\001\002\000\052\021\uff9a\024\223\025\uff9a\026\uff9a\027" +
    "\uff9a\030\224\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\046" +
    "\uff9a\047\uff9a\063\uff9a\001\002\000\054\020\133\021\uff9b" +
    "\024\132\025\uff9b\026\uff9b\027\uff9b\030\012\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\046\uff9b\047\uff9b\063\uff9b\001" +
    "\002\000\036\006\uffcb\011\uffcb\023\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\056\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\077\uffcb\001\002\000\032\017\125\020\105" +
    "\032\120\044\107\071\102\073\110\074\121\075\130\076" +
    "\112\077\007\100\113\101\116\001\002\000\046\021\uff92" +
    "\025\uff92\026\uff92\027\uff92\031\145\032\136\033\143\034" +
    "\141\035\147\036\152\037\140\040\146\041\150\042\142" +
    "\043\151\046\137\047\153\063\144\001\002\000\004\077" +
    "\367\001\002\000\006\021\uffc9\027\365\001\002\000\004" +
    "\021\270\001\002\000\006\022\272\026\271\001\002\000" +
    "\036\006\uffdb\011\uffdb\023\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\056\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\077\uffdb\001\002\000\062\017\125\020\105\022\272" +
    "\023\uffc4\026\276\032\120\044\107\055\302\057\277\061" +
    "\305\062\275\064\060\065\057\066\067\067\066\070\070" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\036\006\uffd9\011\uffd9\023\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\056\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\077\uffd9\001\002\000\064" +
    "\017\uffbc\020\uffbc\022\uffbc\023\uffbc\026\uffbc\032\uffbc\044" +
    "\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\001\002" +
    "\000\004\020\340\001\002\000\064\017\uffbb\020\uffbb\022" +
    "\uffbb\023\uffbb\026\uffbb\032\uffbb\044\uffbb\055\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\001\002\000\004\020\332\001" +
    "\002\000\052\020\133\024\240\026\uff98\030\012\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\045\134\046\uff98\047\uff98" +
    "\063\uff98\077\uffd1\001\002\000\062\017\125\020\105\022" +
    "\272\023\uffc4\026\276\032\120\044\107\055\302\057\277" +
    "\061\305\062\275\064\060\065\057\066\067\067\066\070" +
    "\070\071\102\073\110\074\121\075\130\076\112\077\007" +
    "\100\113\101\116\001\002\000\034\017\125\020\105\026" +
    "\326\032\120\044\107\071\102\073\110\074\121\075\130" +
    "\076\112\077\007\100\113\101\116\001\002\000\064\017" +
    "\uffb9\020\uffb9\022\uffb9\023\uffb9\026\uffb9\032\uffb9\044\uffb9" +
    "\055\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\001\002\000" +
    "\064\017\uffba\020\uffba\022\uffba\023\uffba\026\uffba\032\uffba" +
    "\044\uffba\055\uffba\057\uffba\060\uffba\061\uffba\062\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\073\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\001" +
    "\002\000\004\020\322\001\002\000\064\017\uffb8\020\uffb8" +
    "\022\uffb8\023\uffb8\026\uffb8\032\uffb8\044\uffb8\055\uffb8\057" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\070\uffb8\071\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\001\002\000\040\026\321" +
    "\031\145\032\136\033\143\034\141\035\147\036\152\037" +
    "\140\040\146\041\150\042\142\043\151\046\137\047\153" +
    "\063\144\001\002\000\004\026\320\001\002\000\064\017" +
    "\uffbd\020\uffbd\022\uffbd\023\uffbd\026\uffbd\032\uffbd\044\uffbd" +
    "\055\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\073\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\001\002\000" +
    "\004\077\315\001\002\000\004\023\314\001\002\000\102" +
    "\006\uffc6\011\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\026" +
    "\uffc6\032\uffc6\044\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\001" +
    "\002\000\006\026\uffc3\045\316\001\002\000\032\017\125" +
    "\020\105\032\120\044\107\071\102\073\110\074\121\075" +
    "\130\076\112\077\007\100\113\101\116\001\002\000\040" +
    "\026\uffc2\031\145\032\136\033\143\034\141\035\147\036" +
    "\152\037\140\040\146\041\150\042\142\043\151\046\137" +
    "\047\153\063\144\001\002\000\064\017\uffbe\020\uffbe\022" +
    "\uffbe\023\uffbe\026\uffbe\032\uffbe\044\uffbe\055\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe" +
    "\077\uffbe\100\uffbe\101\uffbe\001\002\000\064\017\uffbf\020" +
    "\uffbf\022\uffbf\023\uffbf\026\uffbf\032\uffbf\044\uffbf\055\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\073\uffbf\074\uffbf\075\uffbf" +
    "\076\uffbf\077\uffbf\100\uffbf\101\uffbf\001\002\000\032\017" +
    "\125\020\105\032\120\044\107\071\102\073\110\074\121" +
    "\075\130\076\112\077\007\100\113\101\116\001\002\000" +
    "\040\021\324\031\145\032\136\033\143\034\141\035\147" +
    "\036\152\037\140\040\146\041\150\042\142\043\151\046" +
    "\137\047\153\063\144\001\002\000\060\017\125\020\105" +
    "\022\272\026\276\032\120\044\107\055\302\057\277\061" +
    "\305\062\275\064\060\065\057\066\067\067\066\070\070" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\064\017\uffb5\020\uffb5\022\uffb5" +
    "\023\uffb5\026\uffb5\032\uffb5\044\uffb5\055\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\101\uffb5\001\002\000\064\017\uffc1\020\uffc1" +
    "\022\uffc1\023\uffc1\026\uffc1\032\uffc1\044\uffc1\055\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\001\002\000\040\026\330" +
    "\031\145\032\136\033\143\034\141\035\147\036\152\037" +
    "\140\040\146\041\150\042\142\043\151\046\137\047\153" +
    "\063\144\001\002\000\064\017\uffc0\020\uffc0\022\uffc0\023" +
    "\uffc0\026\uffc0\032\uffc0\044\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0" +
    "\100\uffc0\101\uffc0\001\002\000\004\023\uffc5\001\002\000" +
    "\032\017\125\020\105\032\120\044\107\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\040\021\334\031\145\032\136\033\143\034\141" +
    "\035\147\036\152\037\140\040\146\041\150\042\142\043" +
    "\151\046\137\047\153\063\144\001\002\000\060\017\125" +
    "\020\105\022\272\026\276\032\120\044\107\055\302\057" +
    "\277\061\305\062\275\064\060\065\057\066\067\067\066" +
    "\070\070\071\102\073\110\074\121\075\130\076\112\077" +
    "\007\100\113\101\116\001\002\000\064\017\uffb7\020\uffb7" +
    "\022\uffb7\023\uffb7\026\uffb7\032\uffb7\044\uffb7\055\uffb7\057" +
    "\uffb7\060\336\061\uffb7\062\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\073\uffb7\074\uffb7\075\uffb7\076" +
    "\uffb7\077\uffb7\100\uffb7\101\uffb7\001\002\000\060\017\125" +
    "\020\105\022\272\026\276\032\120\044\107\055\302\057" +
    "\277\061\305\062\275\064\060\065\057\066\067\067\066" +
    "\070\070\071\102\073\110\074\121\075\130\076\112\077" +
    "\007\100\113\101\116\001\002\000\064\017\uffb6\020\uffb6" +
    "\022\uffb6\023\uffb6\026\uffb6\032\uffb6\044\uffb6\055\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\101\uffb6\001\002\000\042\017\125" +
    "\020\342\026\uffb1\064\060\065\057\066\067\067\066\070" +
    "\070\071\102\073\110\074\121\075\130\076\112\077\007" +
    "\100\113\101\116\001\002\000\010\024\uff8b\026\uffb2\030" +
    "\uff8b\001\002\000\032\017\125\020\105\032\120\044\107" +
    "\071\102\073\110\074\121\075\130\076\112\077\007\100" +
    "\113\101\116\001\002\000\006\024\223\030\224\001\002" +
    "\000\004\026\uffb4\001\002\000\004\026\uffb3\001\002\000" +
    "\014\020\133\024\240\030\012\045\134\077\uffd1\001\002" +
    "\000\004\026\350\001\002\000\034\017\125\020\105\026" +
    "\uffaf\032\120\044\107\071\102\073\110\074\121\075\130" +
    "\076\112\077\007\100\113\101\116\001\002\000\040\026" +
    "\uffb0\031\145\032\136\033\143\034\141\035\147\036\152" +
    "\037\140\040\146\041\150\042\142\043\151\046\137\047" +
    "\153\063\144\001\002\000\004\026\353\001\002\000\030" +
    "\017\125\020\342\021\uffab\071\102\073\110\074\121\075" +
    "\130\076\112\077\007\100\113\101\116\001\002\000\010" +
    "\021\uffad\024\uff8b\030\uff8b\001\002\000\004\021\361\001" +
    "\002\000\004\021\uffae\001\002\000\012\020\133\024\132" +
    "\030\012\045\134\001\002\000\010\021\uffac\024\uff86\030" +
    "\uff86\001\002\000\060\017\125\020\105\022\272\026\276" +
    "\032\120\044\107\055\302\057\277\061\305\062\275\064" +
    "\060\065\057\066\067\067\066\070\070\071\102\073\110" +
    "\074\121\075\130\076\112\077\007\100\113\101\116\001" +
    "\002\000\064\017\uffaa\020\uffaa\022\uffaa\023\uffaa\026\uffaa" +
    "\032\uffaa\044\uffaa\055\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\001\002\000\040\021\364\031\145\032\136\033\143" +
    "\034\141\035\147\036\152\037\140\040\146\041\150\042" +
    "\142\043\151\046\137\047\153\063\144\001\002\000\006" +
    "\024\uff8d\030\uff8d\001\002\000\020\021\uffc8\064\060\065" +
    "\057\066\067\067\066\070\070\077\007\001\002\000\004" +
    "\021\uffca\001\002\000\006\021\uffc7\027\uffc7\001\002\000" +
    "\020\021\uffc8\064\060\065\057\066\067\067\066\070\070" +
    "\077\007\001\002\000\004\021\372\001\002\000\004\022" +
    "\272\001\002\000\036\006\uffcd\011\uffcd\023\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\056\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\077\uffcd\001\002\000\004\020\375" +
    "\001\002\000\020\021\uffc8\064\060\065\057\066\067\067" +
    "\066\070\070\077\007\001\002\000\004\021\377\001\002" +
    "\000\006\022\272\026\u0100\001\002\000\036\006\uffda\011" +
    "\uffda\023\uffda\050\uffda\051\uffda\052\uffda\053\uffda\056\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\077\uffda\001" +
    "\002\000\036\006\uffd8\011\uffd8\023\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\056\uffd8\064\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\077\uffd8\001\002\000\004\077\u0103\001\002" +
    "\000\006\004\u0104\022\uffe5\001\002\000\004\077\007\001" +
    "\002\000\004\022\u0106\001\002\000\036\006\022\011\033" +
    "\023\uffdc\050\025\051\020\052\031\053\024\056\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\077\uffed\001\002" +
    "\000\020\056\u010c\064\060\065\057\066\067\067\066\070" +
    "\070\077\007\001\002\000\004\023\u010b\001\002\000\036" +
    "\006\022\011\033\023\uffdc\050\025\051\020\052\031\053" +
    "\024\056\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\077\uffed\001\002\000\004\023\uffdd\001\002\000\004\002" +
    "\uffe9\001\002\000\004\077\u0112\001\002\000\004\077\u010e" +
    "\001\002\000\004\020\u010f\001\002\000\020\021\uffc8\064" +
    "\060\065\057\066\067\067\066\070\070\077\007\001\002" +
    "\000\004\021\u0111\001\002\000\004\026\271\001\002\000" +
    "\004\020\u0113\001\002\000\020\021\uffc8\064\060\065\057" +
    "\066\067\067\066\070\070\077\007\001\002\000\004\021" +
    "\u0115\001\002\000\004\026\u0100\001\002\000\006\022\uffe6" +
    "\027\045\001\002\000\020\006\ufffd\011\ufffd\014\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000\006\026\ufff9" +
    "\030\u011b\001\002\000\004\026\u011a\001\002\000\022\006" +
    "\ufffb\007\ufffb\011\ufffb\014\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\001\002\000\006\033\u011c\077\013\001\002\000" +
    "\004\026\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\006\005\004\073\003\001\001\000\002\001" +
    "\001\000\006\006\014\010\015\001\001\000\004\004\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0117" +
    "\007\u0118\001\001\000\006\006\014\010\u0116\001\001\000" +
    "\014\002\027\003\025\013\026\014\016\015\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\027\003\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\035\001" +
    "\001\000\004\062\040\001\001\000\004\004\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\042\011" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\045\001\001\000\002\001\001\000\004\065\047\001" +
    "\001\000\016\002\027\003\052\067\054\070\051\071\050" +
    "\072\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\070\016\063\017\061\020\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\070\016\264\017\061" +
    "\020\064\021\265\022\266\001\001\000\040\004\126\023" +
    "\103\037\105\040\110\041\122\042\116\044\121\045\102" +
    "\046\100\047\077\050\125\051\123\054\130\055\114\057" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\236\017\234\020\235\023\233\037\105\040\110\041\122" +
    "\042\116\044\121\045\102\046\100\047\077\050\125\051" +
    "\123\054\130\055\114\057\113\001\001\000\002\001\001" +
    "\000\040\004\126\023\232\037\105\040\110\041\122\042" +
    "\116\044\121\045\102\046\100\047\077\050\125\051\123" +
    "\054\130\055\114\057\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\126\023\221\037\105\040\110\041\122" +
    "\042\116\044\121\045\102\046\100\047\077\050\125\051" +
    "\123\054\130\055\114\057\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\206\017\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\126\023\202\037\105\040\110\041\122\042\116\044\121" +
    "\045\102\046\100\047\077\050\125\051\123\054\130\055" +
    "\114\057\113\001\001\000\042\004\126\023\175\037\105" +
    "\040\110\041\122\042\116\044\121\045\102\046\100\047" +
    "\077\050\125\051\123\052\176\054\130\055\114\057\113" +
    "\001\001\000\040\004\126\023\134\037\105\040\110\041" +
    "\122\042\116\044\121\045\102\046\100\047\077\050\125" +
    "\051\123\054\130\055\114\057\113\001\001\000\002\001" +
    "\001\000\040\004\126\023\174\037\105\040\110\041\122" +
    "\042\116\044\121\045\102\046\100\047\077\050\125\051" +
    "\123\054\130\055\114\057\113\001\001\000\040\004\126" +
    "\023\173\037\105\040\110\041\122\042\116\044\121\045" +
    "\102\046\100\047\077\050\125\051\123\054\130\055\114" +
    "\057\113\001\001\000\040\004\126\023\172\037\105\040" +
    "\110\041\122\042\116\044\121\045\102\046\100\047\077" +
    "\050\125\051\123\054\130\055\114\057\113\001\001\000" +
    "\040\004\126\023\171\037\105\040\110\041\122\042\116" +
    "\044\121\045\102\046\100\047\077\050\125\051\123\054" +
    "\130\055\114\057\113\001\001\000\040\004\126\023\170" +
    "\037\105\040\110\041\122\042\116\044\121\045\102\046" +
    "\100\047\077\050\125\051\123\054\130\055\114\057\113" +
    "\001\001\000\040\004\126\023\167\037\105\040\110\041" +
    "\122\042\116\044\121\045\102\046\100\047\077\050\125" +
    "\051\123\054\130\055\114\057\113\001\001\000\010\004" +
    "\164\017\162\020\163\001\001\000\040\004\126\023\161" +
    "\037\105\040\110\041\122\042\116\044\121\045\102\046" +
    "\100\047\077\050\125\051\123\054\130\055\114\057\113" +
    "\001\001\000\040\004\126\023\160\037\105\040\110\041" +
    "\122\042\116\044\121\045\102\046\100\047\077\050\125" +
    "\051\123\054\130\055\114\057\113\001\001\000\040\004" +
    "\126\023\157\037\105\040\110\041\122\042\116\044\121" +
    "\045\102\046\100\047\077\050\125\051\123\054\130\055" +
    "\114\057\113\001\001\000\040\004\126\023\156\037\105" +
    "\040\110\041\122\042\116\044\121\045\102\046\100\047" +
    "\077\050\125\051\123\054\130\055\114\057\113\001\001" +
    "\000\040\004\126\023\155\037\105\040\110\041\122\042" +
    "\116\044\121\045\102\046\100\047\077\050\125\051\123" +
    "\054\130\055\114\057\113\001\001\000\040\004\126\023" +
    "\154\037\105\040\110\041\122\042\116\044\121\045\102" +
    "\046\100\047\077\050\125\051\123\054\130\055\114\057" +
    "\113\001\001\000\040\004\126\023\153\037\105\040\110" +
    "\041\122\042\116\044\121\045\102\046\100\047\077\050" +
    "\125\051\123\054\130\055\114\057\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\126\023\175\037\105\040" +
    "\110\041\122\042\116\044\121\045\102\046\100\047\077" +
    "\050\125\051\123\052\201\054\130\055\114\057\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\126\023\205\037\105\040\110\041\122\042" +
    "\116\044\121\045\102\046\100\047\077\050\125\051\123" +
    "\054\130\055\114\057\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\126\023\211" +
    "\037\105\040\110\041\122\042\116\044\121\045\102\046" +
    "\100\047\077\050\125\051\123\054\130\055\114\057\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\126\023\217\037\105\040\110\041\122\042\116\044\121" +
    "\045\102\046\100\047\077\050\125\051\123\054\130\055" +
    "\114\057\113\001\001\000\042\004\126\023\175\037\105" +
    "\040\110\041\122\042\116\044\121\045\102\046\100\047" +
    "\077\050\125\051\123\052\215\054\130\055\114\057\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\126" +
    "\023\230\037\105\040\110\041\122\042\116\044\121\045" +
    "\102\046\100\047\077\050\125\051\123\054\130\055\114" +
    "\057\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\126\023\175\037\105\040\110\041\122\042\116" +
    "\044\121\045\102\046\100\047\077\050\125\051\123\052" +
    "\226\054\130\055\114\057\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\126\023\202\037" +
    "\105\040\110\041\122\042\116\044\121\045\102\046\100" +
    "\047\077\050\125\051\123\054\130\055\114\057\113\001" +
    "\001\000\032\004\245\037\105\040\110\041\122\042\243" +
    "\045\242\046\241\047\077\050\244\051\123\054\130\055" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\253\037\105\040\110\041\122\042\251\045\247\046\241" +
    "\047\077\050\244\051\123\054\130\055\114\061\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\126\023\254\037\105\040\110\041\122\042" +
    "\116\044\121\045\102\046\100\047\077\050\125\051\123" +
    "\054\130\055\114\057\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\004\260\037\105\040\110\041\122" +
    "\042\257\045\256\046\241\047\077\050\244\051\123\054" +
    "\130\055\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\126\023" +
    "\263\037\105\040\110\041\122\042\116\044\121\045\102" +
    "\046\100\047\077\050\125\051\123\054\130\055\114\057" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\272\001\001\000" +
    "\002\001\001\000\066\004\277\016\311\017\061\020\064" +
    "\023\306\024\312\025\300\026\307\027\310\030\273\031" +
    "\303\032\302\036\305\037\105\040\110\041\122\042\116" +
    "\044\121\045\102\046\100\047\077\050\125\051\123\054" +
    "\130\055\114\057\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\004\277\016\311\017\061" +
    "\020\064\023\306\024\330\025\300\026\307\027\310\030" +
    "\273\031\303\032\302\036\305\037\105\040\110\041\122" +
    "\042\116\044\121\045\102\046\100\047\077\050\125\051" +
    "\123\054\130\055\114\057\113\001\001\000\040\004\126" +
    "\023\326\037\105\040\110\041\122\042\116\044\121\045" +
    "\102\046\100\047\077\050\125\051\123\054\130\055\114" +
    "\057\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\126" +
    "\023\316\037\105\040\110\041\122\042\116\044\121\045" +
    "\102\046\100\047\077\050\125\051\123\054\130\055\114" +
    "\057\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\126\023\322\037\105\040\110" +
    "\041\122\042\116\044\121\045\102\046\100\047\077\050" +
    "\125\051\123\054\130\055\114\057\113\001\001\000\002" +
    "\001\001\000\064\004\277\016\311\017\061\020\064\023" +
    "\306\025\324\026\307\027\310\030\273\031\303\032\302" +
    "\036\305\037\105\040\110\041\122\042\116\044\121\045" +
    "\102\046\100\047\077\050\125\051\123\054\130\055\114" +
    "\057\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\126\023\332\037\105\040\110\041\122\042\116\044" +
    "\121\045\102\046\100\047\077\050\125\051\123\054\130" +
    "\055\114\057\113\001\001\000\002\001\001\000\064\004" +
    "\277\016\311\017\061\020\064\023\306\025\334\026\307" +
    "\027\310\030\273\031\303\032\302\036\305\037\105\040" +
    "\110\041\122\042\116\044\121\045\102\046\100\047\077" +
    "\050\125\051\123\054\130\055\114\057\113\001\001\000" +
    "\002\001\001\000\064\004\277\016\311\017\061\020\064" +
    "\023\306\025\336\026\307\027\310\030\273\031\303\032" +
    "\302\036\305\037\105\040\110\041\122\042\116\044\121" +
    "\045\102\046\100\047\077\050\125\051\123\054\130\055" +
    "\114\057\113\001\001\000\002\001\001\000\036\004\345" +
    "\016\311\017\061\020\064\026\343\033\346\042\342\044" +
    "\344\046\100\047\340\050\125\051\123\054\130\055\114" +
    "\001\001\000\002\001\001\000\040\004\126\023\362\037" +
    "\105\040\110\041\122\042\116\044\121\045\102\046\100" +
    "\047\077\050\125\051\123\054\130\055\114\057\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\126\023" +
    "\350\034\351\037\105\040\110\041\122\042\116\044\121" +
    "\045\102\046\100\047\077\050\125\051\123\054\130\055" +
    "\114\057\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\356\035\354\042\342\044\355\046\100\047" +
    "\353\050\125\051\123\054\357\055\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\004\277\016\311\017\061" +
    "\020\064\023\306\025\361\026\307\027\310\030\273\031" +
    "\303\032\302\036\305\037\105\040\110\041\122\042\116" +
    "\044\121\045\102\046\100\047\077\050\125\051\123\054" +
    "\130\055\114\057\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\070\016\264\017" +
    "\061\020\064\021\265\022\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\070\016\264\017\061\020" +
    "\064\021\265\022\370\001\001\000\002\001\001\000\004" +
    "\030\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\070\016\264\017\061\020\064\021\265\022\375" +
    "\001\001\000\002\001\001\000\004\030\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0104\001\001\000\006\004\042\011\u0115\001\001\000" +
    "\002\001\001\000\012\002\027\003\u0106\066\u0107\067\u0108" +
    "\001\001\000\012\004\070\016\u010c\017\061\020\064\001" +
    "\001\000\002\001\001\000\012\002\027\003\u0106\066\u0109" +
    "\067\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\070\016\264\017\061\020\064\021\265\022\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\070\016\264\017\061\020\064\021\265\022" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int intLiteralErrorCount = 0;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= java EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Java start_val = (Java)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // java ::= pkg_decl pkg_import_list class_or_interface 
            {
              Java RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PkgURI pd = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<PkgURI> pl = (ArrayList<PkgURI>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassOrInterface c = (ClassOrInterface)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if (intLiteralErrorCount != 0) {
            report_fatal_error("int literal upper bound exceeded. intLiteralErrorCount:" + intLiteralErrorCount, null);
        }
        RESULT = new Java(pd, pl, c);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("java",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pkg_decl ::= PACKAGE pkg_uri SEMICOLON 
            {
              PkgURI RESULT =null;
		int urileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PkgURI uri = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = uri;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pkg_decl ::= 
            {
              PkgURI RESULT =null;
		
                RESULT = new PkgURI(new ArrayList());
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pkg_import_list ::= pkg_import pkg_import_list 
            {
              ArrayList<PkgURI> RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PkgURI pi = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<PkgURI> pil = (ArrayList<PkgURI>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    pil.add(0, pi);
                    RESULT = pil;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_import_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pkg_import_list ::= 
            {
              ArrayList<PkgURI> RESULT =null;
		
                    RESULT = new ArrayList<PkgURI>();
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_import_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pkg_import ::= IMPORT pkg_uri_including_star SEMICOLON 
            {
              PkgURI RESULT =null;
		int puisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int puisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PkgURI puis = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = puis; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_import",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pkg_uri_including_star ::= pkg_uri DOT STAR 
            {
              PkgURI RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            pu.getLst().add("*");
                            pu.setIncludeStar(true);
                            RESULT = pu;
                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_uri_including_star",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pkg_uri_including_star ::= pkg_uri 
            {
              PkgURI RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pu; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_uri_including_star",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pkg_uri ::= pkg_uri DOT ID 
            {
              PkgURI RESULT =null;
		int urileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PkgURI uri = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            uri.getLst().add(id);
            RESULT = uri;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_uri",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pkg_uri ::= ID 
            {
              PkgURI RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new PkgURI(new ArrayList<String>(Arrays.asList(id)));
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_uri",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pkg_uri_list ::= pkg_uri_list COMMA pkg_uri 
            {
              ArrayList<PkgURI> RESULT =null;
		int pulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<PkgURI> pul = (ArrayList<PkgURI>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    pul.add(pu);
                    RESULT = pul;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_uri_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pkg_uri_list ::= pkg_uri 
            {
              ArrayList<PkgURI> RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ArrayList<PkgURI>(Arrays.asList(pu));
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pkg_uri_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // modifiers ::= PUBLIC 
            {
              Modifier RESULT =null;
		 RESULT = Modifier.PUBLIC; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // modifiers ::= PROTECTED 
            {
              Modifier RESULT =null;
		 RESULT = Modifier.PROTECTED; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // modifiers ::= ABSTRACT 
            {
              Modifier RESULT =null;
		 RESULT = Modifier.ABSTRACT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // modifiers ::= FINAL 
            {
              Modifier RESULT =null;
		 RESULT = Modifier.FINAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // modifiers ::= STATIC 
            {
              Modifier RESULT =null;
		 RESULT = Modifier.STATIC; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modifiers ::= NATIVE 
            {
              Modifier RESULT =null;
		 RESULT = Modifier.NATIVE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // modifiers_list ::= modifiers modifiers_list 
            {
              HashSet<Modifier> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Modifier m = (Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		HashSet<Modifier> rml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    HashSet<Modifier>ml = new HashSet<Modifier>();
                    ml.add(m);
                    ml.addAll(rml);

                    if (ml.contains(Modifier.ABSTRACT) && (ml.contains(Modifier.FINAL) || ml.contains(Modifier.STATIC))) {
                        report_fatal_error("class modifier_list cannot have both abstract and final: ", ml);
                    }

                    RESULT = ml;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // modifiers_list ::= 
            {
              HashSet<Modifier> RESULT =null;
		 RESULT = new HashSet<Modifier>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modifiers_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_or_interface ::= class_decl 
            {
              ClassOrInterface RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl c = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = c;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_or_interface",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // class_or_interface ::= public_interface_decl 
            {
              ClassOrInterface RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InterfaceDecl i = (InterfaceDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = i;
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_or_interface",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_decl ::= modifiers_list CLASS ID extends_ implements_ LEFT_CURLY_BRACE method_or_field_list RIGHT_CURLY_BRACE 
            {
              ClassDecl RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CompoundVariableType ext = (CompoundVariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<CompoundVariableType> imp = (ArrayList<CompoundVariableType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<MethodOrField> mfl = (ArrayList<MethodOrField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                if (ml.size() == 0) {
                    report_fatal_error("cannot have private class:  ", ml);
                }
                for (MethodOrField entry : mfl) {
                    if (entry instanceof MethodDecl && (!((MethodDecl) entry).getModifier_list().contains(Modifier.ABSTRACT) && !((MethodDecl) entry).getModifier_list().contains(Modifier.NATIVE))) {
                        report_fatal_error("method cannot have empty body if it is not abstract or native:  ", ml);
                    }
                }
                RESULT = new ClassDecl(ml, className, ext, imp, mfl);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // public_interface_decl ::= PUBLIC INTERFACE ID interface_extends_ LEFT_CURLY_BRACE method_decl_list RIGHT_CURLY_BRACE 
            {
              InterfaceDecl RESULT =null;
		int interfaceNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int interfaceNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String interfaceName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<CompoundVariableType> ext = (ArrayList<CompoundVariableType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<MethodDecl> mdl = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = new InterfaceDecl(interfaceName, ext, mdl);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("public_interface_decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // extends_ ::= EXTENDS pkg_uri 
            {
              CompoundVariableType RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new CompoundVariableType(pu);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extends_",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // extends_ ::= 
            {
              CompoundVariableType RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extends_",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // interface_extends_ ::= EXTENDS pkg_uri_list 
            {
              ArrayList<CompoundVariableType> RESULT =null;
		int pulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pulright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<PkgURI> pul = (ArrayList<PkgURI>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<CompoundVariableType> cvtl = new ArrayList<CompoundVariableType>();
                for (PkgURI pu : pul) {
                  cvtl.add(new CompoundVariableType(pu));
                }
                RESULT = cvtl;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_extends_",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // interface_extends_ ::= 
            {
              ArrayList<CompoundVariableType> RESULT =null;
		 RESULT = new ArrayList<CompoundVariableType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interface_extends_",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // implements_ ::= IMPLEMENTS pkg_uri_list 
            {
              ArrayList<CompoundVariableType> RESULT =null;
		int pulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pulright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<PkgURI> pul = (ArrayList<PkgURI>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ArrayList<CompoundVariableType> cvtl = new ArrayList<CompoundVariableType>();
                  for (PkgURI pu : pul) {
                      cvtl.add(new CompoundVariableType(pu));
                  }
                  RESULT = cvtl;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("implements_",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // implements_ ::= 
            {
              ArrayList<CompoundVariableType> RESULT =null;
		 RESULT = new ArrayList<CompoundVariableType>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("implements_",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // method_or_field_list ::= method_or_field_list method 
            {
              ArrayList<MethodOrField> RESULT =null;
		int mflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<MethodOrField> mfl = (ArrayList<MethodOrField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        mfl.add(m);
                        RESULT = mfl;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_or_field_list",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_or_field_list ::= method_or_field_list field 
            {
              ArrayList<MethodOrField> RESULT =null;
		int mflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<MethodOrField> mfl = (ArrayList<MethodOrField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Field f = (Field)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        mfl.add(f);
                        RESULT = mfl;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_or_field_list",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_or_field_list ::= method_or_field_list constructor 
            {
              ArrayList<MethodOrField> RESULT =null;
		int mflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<MethodOrField> mfl = (ArrayList<MethodOrField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constructor c = (Constructor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        mfl.add(c);
                        RESULT = mfl;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_or_field_list",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_or_field_list ::= method_or_field_list method_decl 
            {
              ArrayList<MethodOrField> RESULT =null;
		int mflleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mflright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<MethodOrField> mfl = (ArrayList<MethodOrField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        mfl.add(md);
                        RESULT = mfl;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_or_field_list",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_or_field_list ::= 
            {
              ArrayList<MethodOrField> RESULT =null;
		
                        RESULT = new ArrayList<MethodOrField>();
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_or_field_list",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // method_decl_list ::= method_decl method_decl_list 
            {
              ArrayList<MethodDecl> RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<MethodDecl> mdl = (ArrayList<MethodDecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        mdl.add(0, md);
                        RESULT = mdl;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_decl_list ::= 
            {
              ArrayList<MethodDecl> RESULT =null;
		 RESULT = new ArrayList<MethodDecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_decl ::= modifiers_list variable_type ID LEFT_PAREN parameter_list RIGHT_PAREN SEMICOLON 
            {
              MethodDecl RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parameter> pl = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
//                    if (!ml.contains(Modifier.ABSTRACT) && !ml.contains(Modifier.NATIVE)) {
//                        report_fatal_error("method cannot have empty body if it is not abstract or native:  ", ml);
//                    } else if (ml.contains(Modifier.NATIVE) && !ml.contains(Modifier.STATIC)) {
//                        report_fatal_error("native method must be static:  ", ml);
//                    } else if (!ml.contains(Modifier.PUBLIC) && !ml.contains(Modifier.PROTECTED)) {
//                        report_fatal_error("package private methods not allowed:  ", ml);
//                    }

                    if (ml.contains(Modifier.NATIVE) && !ml.contains(Modifier.STATIC)) {
                        report_fatal_error("native method must be static:  ", ml);
                    } else if (!ml.contains(Modifier.PUBLIC) && !ml.contains(Modifier.PROTECTED)) {
                        report_fatal_error("package private methods not allowed:  ", ml);
                    }
                    if (ml.size() == 0){
                        report_fatal_error("methods must have a modifier:  ", ml);
                    }
                    RESULT = new MethodDecl(ml, vt, id, pl);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_decl ::= modifiers_list VOID ID LEFT_PAREN parameter_list RIGHT_PAREN SEMICOLON 
            {
              MethodDecl RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parameter> pl = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
//                  if (!ml.contains(Modifier.ABSTRACT) && !ml.contains(Modifier.NATIVE)) {
//                      report_fatal_error("method cannot have empty body if it is not abstract or native:  ", ml);
//                  } else if (ml.contains(Modifier.NATIVE) && !ml.contains(Modifier.STATIC)) {
//                      report_fatal_error("native method must be static:  ", ml);
//                  } else if (!ml.contains(Modifier.PUBLIC) && !ml.contains(Modifier.PROTECTED)) {
//                      report_fatal_error("package private methods not allowed:  ", ml);
//                  }
                  if (ml.contains(Modifier.NATIVE) && !ml.contains(Modifier.STATIC)) {
                    report_fatal_error("native method must be static:  ", ml);
                  } else if (!ml.contains(Modifier.PUBLIC) && !ml.contains(Modifier.PROTECTED)) {
                    report_fatal_error("package private methods not allowed:  ", ml);
                  }
                  if (ml.size() == 0){
                      report_fatal_error("methods must have a modifier:  ", ml);
                  }
                  RESULT = new MethodDecl(ml, new PrimitiveType(Primitive.VOID), id, pl);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // method ::= modifiers_list variable_type ID LEFT_PAREN parameter_list RIGHT_PAREN block 
            {
              Method RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parameter> pl = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (ml.contains(Modifier.ABSTRACT) || ml.contains(Modifier.NATIVE)) {
                report_fatal_error("method cannot have a body if it is abstract or native:  ", ml);
            } else if (ml.contains(Modifier.STATIC) && ml.contains(Modifier.FINAL)) {
                report_fatal_error("static method cannot be final:  ", ml);
            } else if (!ml.contains(Modifier.PUBLIC) && !ml.contains(Modifier.PROTECTED)) {
                report_fatal_error("package private methods not allowed:  ", ml);
            }
            if (ml.size() == 0){
                report_fatal_error("methods must have a modifier:  ", ml);
            }
            RESULT = new Method(ml, vt, id, pl, b);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method ::= modifiers_list VOID ID LEFT_PAREN parameter_list RIGHT_PAREN block 
            {
              Method RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parameter> pl = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if (ml.contains(Modifier.ABSTRACT) || ml.contains(Modifier.NATIVE)) {
                 report_fatal_error("method cannot have a body if it is abstract or native:  ", ml);
             } else if (ml.contains(Modifier.STATIC) && ml.contains(Modifier.FINAL)) {
                 report_fatal_error("static method cannot be final:  ", ml);
             } else if (!ml.contains(Modifier.PUBLIC) && !ml.contains(Modifier.PROTECTED)) {
                 report_fatal_error("package private methods not allowed:  ", ml);
             }
             if (ml.size() == 0){
                 report_fatal_error("methods must have a modifier:  ", ml);
             }
             RESULT = new Method(ml, new PrimitiveType(Primitive.VOID), id, pl, (Block) b);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primitive_type ::= INT 
            {
              Primitive RESULT =null;
		
                    RESULT = Primitive.INT;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primitive_type ::= BOOLEAN 
            {
              Primitive RESULT =null;
		
                    RESULT = Primitive.BOOLEAN;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primitive_type ::= CHAR 
            {
              Primitive RESULT =null;
		
                    RESULT = Primitive.CHAR;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primitive_type ::= BYTE 
            {
              Primitive RESULT =null;
		
                    RESULT = Primitive.BYTE;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primitive_type ::= SHORT 
            {
              Primitive RESULT =null;
		
                    RESULT = Primitive.SHORT;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_type",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_type ::= primitive_type 
            {
              VariableType RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new PrimitiveType(pt);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type ::= pkg_uri 
            {
              VariableType RESULT =null;
		int urileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI uri = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new CompoundVariableType(uri);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_type ::= array_type 
            {
              VariableType RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = at;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_type ::= primitive_type LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET 
            {
              ArrayType RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new ArrayType(new PrimitiveType(pt));
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // array_type ::= pkg_uri LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET 
            {
              ArrayType RESULT =null;
		int urileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PkgURI uri = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new ArrayType(new CompoundVariableType(uri));
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constructor ::= modifiers_list ID LEFT_PAREN parameter_list RIGHT_PAREN block 
            {
              Constructor RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Parameter> pl = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Constructor(ml, id, pl, b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constructor",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // field ::= modifiers_list variable_type ID SEMICOLON 
            {
              Field RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (ml.contains(Modifier.FINAL)) {
                report_fatal_error("final field must have an initializer: ", ml);
            }
            if (ml.size() == 0) {
                report_fatal_error("fields cannot be package private: ", ml);
            }
            RESULT = new Field(ml, vt, id, null);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // field ::= modifiers_list variable_type ID ASSIGNMENT_OPERATOR expr SEMICOLON 
            {
              Field RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashSet<Modifier> ml = (HashSet<Modifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if (ml.size() == 0) {
                report_fatal_error("fields cannot be package private: ", ml);
            }
            RESULT = new Field(ml, vt, id, (Expr) e);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter_list ::= parameter COMMA parameter_list 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Parameter> pl = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                pl.add(0, p);
                RESULT = pl;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter_list ::= parameter 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new ArrayList<Parameter>(Arrays.asList(p));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter_list ::= 
            {
              ArrayList<Parameter> RESULT =null;
		
                RESULT = new ArrayList<Parameter>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter ::= variable_type ID 
            {
              Parameter RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Parameter(vt, id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block ::= LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> sl = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new Block(sl);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement_list ::= statement statement_list 
            {
              ArrayList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> sl = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    sl.add(0, s);
                    RESULT = sl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement_list ::= 
            {
              ArrayList<Statement> RESULT =null;
		
                    RESULT = new ArrayList<Statement>();
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_decl ::= variable_type ID 
            {
              VariableDecl RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new VariableDecl(vt, name, null);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_decl ::= variable_type ID ASSIGNMENT_OPERATOR expr 
            {
              VariableDecl RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vt = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new VariableDecl(vt, name, e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_decl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new ReturnStatement(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= RETURN expr SEMICOLON 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStatement(ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= expr SEMICOLON 
            {
              Statement RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprStatement(ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= variable_decl SEMICOLON 
            {
              Statement RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDecl vd = (VariableDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = vd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= control_flow 
            {
              Statement RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ControlFlow cf = (ControlFlow)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= block 
            {
              Statement RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= SEMICOLON 
            {
              Statement RESULT =null;
		 RESULT = new Semicolon(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // control_flow ::= if 
            {
              ControlFlow RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_flow",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // control_flow ::= while 
            {
              ControlFlow RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_flow",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // control_flow ::= for 
            {
              ControlFlow RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("control_flow",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if ::= IF LEFT_PAREN expr RIGHT_PAREN statement 
            {
              If RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(ex, stmt, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // if ::= IF LEFT_PAREN expr RIGHT_PAREN statement ELSE statement 
            {
              If RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement tstmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int estmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement estmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(ex, tstmt, estmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // while ::= WHILE LEFT_PAREN expr RIGHT_PAREN statement 
            {
              While RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(ex, stmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_initialization_expr ::= variable_decl 
            {
              ForInitializationExpr RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDecl vd = (VariableDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInitializationExpr(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_initialization_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_initialization_expr ::= variable_assignment 
            {
              ForInitializationExpr RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableAssignment va = (VariableAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInitializationExpr(new ExprStatement(va)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_initialization_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_initialization_expr ::= method_call 
            {
              ForInitializationExpr RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForInitializationExpr(new ExprStatement(mc)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_initialization_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_initialization_expr ::= 
            {
              ForInitializationExpr RESULT =null;
		 RESULT = new ForInitializationExpr(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_initialization_expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_condition_expr ::= expr 
            {
              ForConditionExpr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForConditionExpr(ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_condition_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_condition_expr ::= 
            {
              ForConditionExpr RESULT =null;
		 RESULT = new ForConditionExpr(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_condition_expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_iteration_expr ::= variable_assignment 
            {
              ForIterationExpr RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableAssignment va = (VariableAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForIterationExpr(va); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_iteration_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_iteration_expr ::= method_call 
            {
              ForIterationExpr RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForIterationExpr(mc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_iteration_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_iteration_expr ::= new_object_expr 
            {
              ForIterationExpr RESULT =null;
		int noeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NewObjectExpr noe = (NewObjectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForIterationExpr(noe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_iteration_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_iteration_expr ::= 
            {
              ForIterationExpr RESULT =null;
		 RESULT = new ForIterationExpr(null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_iteration_expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for ::= FOR LEFT_PAREN for_initialization_expr SEMICOLON for_condition_expr SEMICOLON for_iteration_expr RIGHT_PAREN statement 
            {
              For RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ForInitializationExpr ex1 = (ForInitializationExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ForConditionExpr ex2 = (ForConditionExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ex3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForIterationExpr ex3 = (ForIterationExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(ex1, ex2, ex3, stmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // new_array_expr ::= NEW primitive_type LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET 
            {
              NewArrayExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArrayExpr(new PrimitiveType(pt), null, ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_array_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // new_array_expr ::= NEW pkg_uri LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET 
            {
              NewArrayExpr RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArrayExpr(null, new CompoundVariableType(pu), ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_array_expr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // new_object_expr ::= NEW pkg_uri LEFT_PAREN args_list RIGHT_PAREN 
            {
              NewObjectExpr RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> al = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewObjectExpr(new CompoundVariableType(pu), al); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_object_expr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cast_expr ::= primitive_cast_expr 
            {
              CastExpr RESULT =null;
		int pseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimitiveCastExpr pse = (PrimitiveCastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pse; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // cast_expr ::= array_cast_expr 
            {
              CastExpr RESULT =null;
		int aceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayCastExpr ace = (ArrayCastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ace; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cast_expr ::= ref_cast_expr 
            {
              CastExpr RESULT =null;
		int rceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RefCastExpr rce = (RefCastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rce; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cast_expr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // primitive_cast_expr ::= LEFT_PAREN primitive_type RIGHT_PAREN pkg_uri 
            {
              PrimitiveCastExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pkgURIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkgURIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pkgURI = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveCastExpr(pt, pkgURI.pkgURIToAccess()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_cast_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // primitive_cast_expr ::= LEFT_PAREN primitive_type RIGHT_PAREN single_term_expr 
            {
              PrimitiveCastExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleTermExpr expr = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveCastExpr(pt, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_cast_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primitive_cast_expr ::= LEFT_PAREN primitive_type RIGHT_PAREN unary_expr 
            {
              PrimitiveCastExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpr expr = (UnaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveCastExpr(pt, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_cast_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primitive_cast_expr ::= LEFT_PAREN primitive_type RIGHT_PAREN cast_expr 
            {
              PrimitiveCastExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CastExpr expr = (CastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveCastExpr(pt, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_cast_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primitive_cast_expr ::= LEFT_PAREN primitive_type RIGHT_PAREN MINUS expr 
            {
              PrimitiveCastExpr RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Primitive pt = (Primitive)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          if (ex instanceof IntLiteral && ((IntLiteral) ex).getValue().compareTo(new BigInteger("-2147483648")) == -1) {
                              report_fatal_error("int literal lower bound exceeded:", ex);
                          }
                          if (ex instanceof IntLiteral && ((IntLiteral)ex).getValue().compareTo(new BigInteger("2147483648")) == 0) {
                              intLiteralErrorCount -= 1;
                          }

                          RESULT = new PrimitiveCastExpr(pt, new UnaryExpr(UnaryOperator.MINUS, ex));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_cast_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_cast_expr ::= LEFT_PAREN array_type RIGHT_PAREN pkg_uri 
            {
              ArrayCastExpr RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pkgURIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkgURIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pkgURI = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayCastExpr(at, pkgURI.pkgURIToAccess()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_cast_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // array_cast_expr ::= LEFT_PAREN array_type RIGHT_PAREN single_term_expr 
            {
              ArrayCastExpr RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleTermExpr expr = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayCastExpr(at, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_cast_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // array_cast_expr ::= LEFT_PAREN array_type RIGHT_PAREN cast_expr 
            {
              ArrayCastExpr RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CastExpr expr = (CastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayCastExpr(at, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_cast_expr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ref_cast_expr ::= LEFT_PAREN expr RIGHT_PAREN pkg_uri 
            {
              RefCastExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pkgURIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkgURIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pkgURI = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new RefCastExpr(new CompoundVariableType(new PkgURI(t.exprToPkgURIList())), pkgURI.pkgURIToAccess());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_cast_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ref_cast_expr ::= LEFT_PAREN expr RIGHT_PAREN single_term_expr 
            {
              RefCastExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleTermExpr e = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new RefCastExpr(new CompoundVariableType(new PkgURI(t.exprToPkgURIList())), e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_cast_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ref_cast_expr ::= LEFT_PAREN expr RIGHT_PAREN cast_expr 
            {
              RefCastExpr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CastExpr e = (CastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new RefCastExpr(new CompoundVariableType(new PkgURI(t.exprToPkgURIList())), e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref_cast_expr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= pkg_uri 
            {
              Expr RESULT =null;
		int pkgURIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkgURIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pkgURI = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = pkgURI.pkgURIToAccess();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= single_term_expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SingleTermExpr ex = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= arithmetic_expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpr ex = (ArithmeticExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= variable_assignment 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableAssignment ex = (VariableAssignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= cast_expr 
            {
              Expr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CastExpr ex = (CastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // variable_assignment ::= pkg_uri ASSIGNMENT_OPERATOR expr 
            {
              VariableAssignment RESULT =null;
		int pkgURIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pkgURIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PkgURI pkgURI = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VariableAssignment(pkgURI.pkgURIToAccess(), e);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // variable_assignment ::= field_access ASSIGNMENT_OPERATOR expr 
            {
              VariableAssignment RESULT =null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldAccess fa = (FieldAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VariableAssignment(fa, e);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // variable_assignment ::= array_access ASSIGNMENT_OPERATOR expr 
            {
              VariableAssignment RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayAccess aa = (ArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VariableAssignment(aa, e);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_assignment",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // args_list ::= expr COMMA args_list 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> al = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                al.add(0, e);
                RESULT = al;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // args_list ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>(Arrays.asList(e));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // args_list ::= 
            {
              ArrayList<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // single_term_expr ::= LEFT_PAREN expr RIGHT_PAREN 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParenWrappedExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // single_term_expr ::= field_access 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldAccess e = (FieldAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // single_term_expr ::= method_call 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall e = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // single_term_expr ::= array_access 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayAccess e = (ArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // single_term_expr ::= literal 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // single_term_expr ::= THIS 
            {
              SingleTermExpr RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // single_term_expr ::= new_array_expr 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NewArrayExpr e = (NewArrayExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // single_term_expr ::= new_object_expr 
            {
              SingleTermExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NewObjectExpr e = (NewObjectExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_term_expr",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // field_access ::= single_term_expr DOT ID 
            {
              FieldAccess RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SingleTermExpr e = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new FieldAccess(e, id);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_access",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // method_call ::= single_term_expr DOT ID LEFT_PAREN args_list RIGHT_PAREN 
            {
              MethodCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		SingleTermExpr e = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> al = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new MethodCall(e, id, al);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // method_call ::= pkg_uri LEFT_PAREN args_list RIGHT_PAREN 
            {
              MethodCall RESULT =null;
		int urileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uriright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PkgURI uri = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> al = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new MethodCall(uri.getLst(), al);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // array_access ::= single_term_expr LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET 
            {
              ArrayAccess RESULT =null;
		int steleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int steright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		SingleTermExpr ste = (SingleTermExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   if (ste instanceof NewArrayExpr) {
                       report_fatal_error("multidimensional array creation expressions not allowed: ", ste);
                   }
                   RESULT = new ArrayAccess(ste, e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // array_access ::= pkg_uri LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET 
            {
              ArrayAccess RESULT =null;
		int pkgURIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pkgURIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PkgURI pkgURI = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   RESULT = new ArrayAccess(pkgURI.pkgURIToAccess(), e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_access",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arithmetic_expr ::= expr PLUS expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.PLUS, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arithmetic_expr ::= expr MINUS expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.MINUS, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arithmetic_expr ::= expr STAR expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.STAR, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arithmetic_expr ::= expr DIVIDE expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.DIVIDE, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // arithmetic_expr ::= expr MODULO expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.MODULO, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // arithmetic_expr ::= expr DOUBLE_EQUALS expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.DOUBLE_EQUALS, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // arithmetic_expr ::= expr LESS_THAN_OR_EQUAL expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.LESS_THAN_OR_EQUAL, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // arithmetic_expr ::= expr GREATER_THAN_OR_EQUAL expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.GREATER_THAN_OR_EQUAL, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // arithmetic_expr ::= expr NOT_EQUAL expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.NOT_EQUAL, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // arithmetic_expr ::= expr LESS_THAN expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.LESS_THAN, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // arithmetic_expr ::= expr GREATER_THAN expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.GREATER_THAN, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arithmetic_expr ::= expr AND expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.AND, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arithmetic_expr ::= expr OR expr 
            {
              ArithmeticExpr RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(ex1, ArithmeticOperator.OR, ex2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arithmetic_expr ::= expr INSTANCEOF pkg_uri 
            {
              ArithmeticExpr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PkgURI pu = (PkgURI)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstanceofExpr(ex, new CompoundVariableType(pu)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arithmetic_expr ::= expr INSTANCEOF array_type 
            {
              ArithmeticExpr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayType at = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstanceofExpr(ex, at); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arithmetic_expr ::= MINUS expr 
            {
              ArithmeticExpr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  if (ex instanceof IntLiteral && ((IntLiteral) ex).getValue().compareTo(new BigInteger("-2147483648")) == -1) {
                      report_fatal_error("int literal lower bound exceeded:", ex);
                  }
                  if (ex instanceof IntLiteral && ((IntLiteral)ex).getValue().compareTo(new BigInteger("2147483648")) == 0) {
                      intLiteralErrorCount -= 1;
                  }

                  RESULT = new UnaryExpr(UnaryOperator.MINUS, ex);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arithmetic_expr ::= NOT expr 
            {
              ArithmeticExpr RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryOperator.NOT, ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= NON_NEGATIVE_INT_VAL 
            {
              Literal RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            BigInteger v = new BigInteger((String)val);
            if (v.compareTo(new BigInteger("2147483647")) == 1) {
                intLiteralErrorCount += 1;
            }
            RESULT = new IntLiteral(v);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= STRING_LITERAL 
            {
              Literal RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new StringLiteral(str);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= CHAR_LITERAL 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CharLiteral(c);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= TRUE 
            {
              Literal RESULT =null;
		
            RESULT = new BoolLiteral(true);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // literal ::= FALSE 
            {
              Literal RESULT =null;
		
            RESULT = new BoolLiteral(false);
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // literal ::= NULL 
            {
              Literal RESULT =null;
		
            RESULT = new NullLiteral();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
