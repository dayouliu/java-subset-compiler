// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: /home/david/dev/java-subset-compiler/src/main/jflex/PorkFlex.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRINGLITERAL = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\7\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\2\0\32\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\0\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\33"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\33\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\1\20\26\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\35\3\37\1\40\1\41\1\6\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\2\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\11\26\1\57\7\26\1\60"+
    "\23\26\1\61\1\32\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\11\75\1\0"+
    "\17\26\1\76\3\26\1\77\2\26\1\100\20\26\1\101"+
    "\3\26\1\65\1\102\1\103\1\104\1\0\1\105\1\106"+
    "\1\107\1\110\1\111\3\26\1\112\1\113\1\114\5\26"+
    "\1\115\4\26\1\116\4\26\1\117\1\26\1\120\13\26"+
    "\1\121\2\26\1\122\1\123\2\26\1\65\1\0\2\26"+
    "\1\124\1\125\1\126\4\26\1\127\1\130\1\131\12\26"+
    "\1\132\2\26\1\133\2\26\1\134\2\26\1\135\4\26"+
    "\1\136\3\26\1\137\2\26\1\140\3\26\1\141\1\142"+
    "\1\143\1\26\1\144\1\26\1\145\3\26\1\146\1\147"+
    "\1\150\1\151\3\26\1\152\1\153\5\26\1\154\4\26"+
    "\1\155\2\26\1\156\2\26\1\157\1\160\1\26\1\161"+
    "\1\162\1\163\2\26\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\264\0\360\0\264\0\u012c"+
    "\0\u0168\0\264\0\264\0\264\0\u01a4\0\u01e0\0\264\0\u021c"+
    "\0\264\0\u0258\0\264\0\u0294\0\264\0\264\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\264\0\264\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\264\0\u07bc\0\264"+
    "\0\264\0\264\0\264\0\u07f8\0\u0834\0\264\0\u0870\0\264"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\u08ac\0\u08e8\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0384\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\264\0\264"+
    "\0\264\0\264\0\264\0\u1194\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u0384\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u0384\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u0384\0\u1c98\0\u1cd4\0\u1d10"+
    "\0\u1d4c\0\264\0\264\0\264\0\u1d88\0\264\0\264\0\264"+
    "\0\264\0\264\0\u1dc4\0\u1e00\0\u1e3c\0\u0384\0\u0384\0\u0384"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u0384\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u0384\0\u2094\0\u20d0\0\u210c\0\u2148\0\u0384"+
    "\0\u2184\0\u0384\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u0384\0\u2454\0\u2490"+
    "\0\u0384\0\u0384\0\u24cc\0\u2508\0\264\0\u2544\0\u2580\0\u25bc"+
    "\0\u0384\0\u0384\0\u0384\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u0384"+
    "\0\u26e8\0\u0384\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850"+
    "\0\u288c\0\u28c8\0\u2904\0\u2940\0\u0384\0\u297c\0\u29b8\0\u0384"+
    "\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u0384\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u0384\0\u2c10\0\u2c4c\0\u2c88\0\u0384\0\u2cc4"+
    "\0\u2d00\0\u0384\0\u2d3c\0\u2d78\0\u2db4\0\u0384\0\u0384\0\u0384"+
    "\0\u2df0\0\u0384\0\u2e2c\0\u0384\0\u2e68\0\u2ea4\0\u2ee0\0\u0384"+
    "\0\u0384\0\u0384\0\u0384\0\u2f1c\0\u2f58\0\u2f94\0\u0384\0\u0384"+
    "\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u0384\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\u0384\0\u31ec\0\u3228\0\u0384\0\u3264\0\u32a0"+
    "\0\u0384\0\u0384\0\u32dc\0\u0384\0\u0384\0\u0384\0\u3318\0\u3354"+
    "\0\u0384";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\0\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\4\1\34\1\35\1\4\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\32\1\45\1\32"+
    "\1\46\1\32\1\47\1\32\1\50\1\51\1\52\1\53"+
    "\1\32\1\54\1\55\3\32\1\56\1\57\1\60\2\61"+
    "\1\62\2\61\1\62\1\61\1\63\25\61\1\64\36\61"+
    "\2\65\1\66\2\65\1\66\4\65\1\66\22\65\1\67"+
    "\36\65\125\0\1\70\73\0\1\71\53\0\1\72\17\0"+
    "\1\73\73\0\1\74\60\0\1\75\12\0\1\76\62\0"+
    "\1\77\10\0\1\100\57\0\1\101\4\0\1\102\6\0"+
    "\1\103\65\0\3\24\76\0\1\104\1\105\73\0\1\106"+
    "\73\0\1\107\1\110\64\0\3\32\5\0\1\32\4\0"+
    "\31\32\34\0\1\111\65\0\3\32\5\0\1\32\4\0"+
    "\2\32\1\112\26\32\26\0\3\32\5\0\1\32\4\0"+
    "\16\32\1\113\1\32\1\114\6\32\1\115\1\32\26\0"+
    "\3\32\5\0\1\32\4\0\1\32\1\116\6\32\1\117"+
    "\2\32\1\120\2\32\1\121\12\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\122\10\32\1\123\12\32\26\0"+
    "\3\32\5\0\1\32\4\0\13\32\1\124\12\32\1\125"+
    "\2\32\26\0\3\32\5\0\1\32\4\0\1\32\1\126"+
    "\7\32\1\127\1\32\1\130\2\32\1\131\12\32\26\0"+
    "\3\32\5\0\1\32\4\0\16\32\1\132\12\32\26\0"+
    "\3\32\5\0\1\32\4\0\6\32\1\133\5\32\1\134"+
    "\1\135\13\32\26\0\3\32\5\0\1\32\4\0\16\32"+
    "\1\136\12\32\26\0\3\32\5\0\1\32\4\0\1\32"+
    "\1\137\3\32\1\140\15\32\1\141\5\32\26\0\3\32"+
    "\5\0\1\32\4\0\1\32\1\142\16\32\1\143\2\32"+
    "\1\144\5\32\26\0\3\32\5\0\1\32\4\0\5\32"+
    "\1\145\23\32\26\0\3\32\5\0\1\32\4\0\10\32"+
    "\1\146\11\32\1\147\1\150\1\32\1\151\1\32\1\152"+
    "\1\32\26\0\3\32\5\0\1\32\4\0\10\32\1\153"+
    "\7\32\1\154\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\16\32\1\155\12\32\26\0\3\32\5\0\1\32\4\0"+
    "\10\32\1\156\20\32\34\0\1\157\40\0\1\160\1\0"+
    "\2\161\4\0\1\161\1\162\2\161\1\163\10\161\2\164"+
    "\10\161\1\165\4\161\1\166\3\161\1\167\6\161\1\170"+
    "\2\161\1\171\1\161\1\172\11\161\12\0\1\173\61\0"+
    "\2\174\4\0\1\174\1\175\2\174\1\176\10\174\2\177"+
    "\10\174\1\175\4\174\1\200\3\174\1\201\6\174\1\202"+
    "\2\174\1\203\1\174\1\204\11\174\15\101\1\205\56\101"+
    "\2\102\1\5\71\102\23\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\206\7\32\26\0\3\32\5\0\1\32\4\0"+
    "\16\32\1\207\12\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\210\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\211\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\212\7\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\213\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\214\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\15\32\1\215\13\32\26\0\3\32\5\0\1\32\4\0"+
    "\6\32\1\216\22\32\26\0\3\32\5\0\1\32\4\0"+
    "\23\32\1\217\5\32\26\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\220\7\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\221\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\13\32\1\222\15\32\26\0\3\32\5\0\1\32\4\0"+
    "\15\32\1\223\13\32\26\0\3\32\5\0\1\32\4\0"+
    "\16\32\1\224\12\32\26\0\3\32\5\0\1\32\4\0"+
    "\20\32\1\225\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\226\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\17\32\1\227\11\32\26\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\230\1\231\6\32\26\0\3\32\5\0\1\32"+
    "\4\0\15\32\1\232\13\32\26\0\3\32\5\0\1\32"+
    "\4\0\22\32\1\233\6\32\26\0\3\32\5\0\1\32"+
    "\4\0\25\32\1\234\3\32\26\0\3\32\5\0\1\32"+
    "\4\0\13\32\1\235\15\32\26\0\3\32\5\0\1\32"+
    "\4\0\3\32\1\236\25\32\26\0\3\32\5\0\1\32"+
    "\4\0\11\32\1\237\4\32\1\240\12\32\26\0\3\32"+
    "\5\0\1\32\4\0\2\32\1\241\26\32\26\0\3\32"+
    "\5\0\1\32\4\0\22\32\1\242\6\32\26\0\3\32"+
    "\5\0\1\32\4\0\16\32\1\243\12\32\26\0\3\32"+
    "\5\0\1\32\4\0\1\32\1\244\16\32\1\245\10\32"+
    "\26\0\3\32\5\0\1\32\4\0\17\32\1\246\11\32"+
    "\26\0\3\32\5\0\1\32\4\0\11\32\1\247\17\32"+
    "\26\0\3\32\5\0\1\32\4\0\15\32\1\250\13\32"+
    "\26\0\3\32\5\0\1\32\4\0\11\32\1\251\6\32"+
    "\1\252\10\32\26\0\3\32\5\0\1\32\4\0\1\32"+
    "\1\253\21\32\1\254\3\32\1\255\1\32\26\0\3\32"+
    "\5\0\1\32\4\0\11\32\1\256\1\32\1\257\15\32"+
    "\26\0\3\32\5\0\1\32\4\0\11\32\1\260\17\32"+
    "\26\0\2\261\61\0\1\262\73\0\1\263\73\0\1\264"+
    "\10\0\2\265\61\0\1\266\73\0\1\267\73\0\1\270"+
    "\73\0\1\271\73\0\1\272\61\0\15\101\1\205\4\101"+
    "\1\5\51\101\23\0\3\32\5\0\1\32\4\0\22\32"+
    "\1\273\6\32\26\0\3\32\5\0\1\32\4\0\13\32"+
    "\1\274\15\32\26\0\3\32\5\0\1\32\4\0\1\32"+
    "\1\275\27\32\26\0\3\32\5\0\1\32\4\0\5\32"+
    "\1\276\23\32\26\0\3\32\5\0\1\32\4\0\5\32"+
    "\1\277\23\32\26\0\3\32\5\0\1\32\4\0\20\32"+
    "\1\300\10\32\26\0\3\32\5\0\1\32\4\0\21\32"+
    "\1\301\7\32\26\0\3\32\5\0\1\32\4\0\21\32"+
    "\1\302\1\303\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\304\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\2\32\1\305\26\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\306\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\307\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\310\7\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\311\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\312\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\16\32\1\313\12\32\26\0\3\32\5\0\1\32\4\0"+
    "\13\32\1\314\2\32\1\315\12\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\316\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\317\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\7\32\1\320\21\32\26\0\3\32\5\0"+
    "\1\32\4\0\11\32\1\321\17\32\26\0\3\32\5\0"+
    "\1\32\4\0\13\32\1\322\15\32\26\0\3\32\5\0"+
    "\1\32\4\0\12\32\1\323\16\32\26\0\3\32\5\0"+
    "\1\32\4\0\24\32\1\324\4\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\325\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\13\32\1\326\15\32\26\0\3\32\5\0"+
    "\1\32\4\0\23\32\1\327\5\32\26\0\3\32\5\0"+
    "\1\32\4\0\20\32\1\330\10\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\331\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\11\32\1\332\17\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\333\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\334\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\335\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\21\32\1\336\7\32\26\0\3\32\5\0"+
    "\1\32\4\0\16\32\1\337\12\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\340\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\341\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\4\32\1\342\24\32\26\0\3\32\5\0"+
    "\1\32\4\0\1\32\1\343\27\32\26\0\3\32\5\0"+
    "\1\32\4\0\13\32\1\344\15\32\26\0\2\345\61\0"+
    "\1\264\10\0\2\346\72\0\3\32\5\0\1\32\4\0"+
    "\20\32\1\347\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\350\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\12\32\1\351\16\32\26\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\352\7\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\353\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\11\32\1\354\17\32\26\0\3\32\5\0\1\32\4\0"+
    "\23\32\1\355\5\32\26\0\3\32\5\0\1\32\4\0"+
    "\13\32\1\356\15\32\26\0\3\32\5\0\1\32\4\0"+
    "\15\32\1\357\13\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\360\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\13\32\1\361\15\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\362\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\363\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\20\32\1\364\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\365\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\20\32\1\366\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\24\32\1\367\4\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\370\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\1\32\1\371\27\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\372\23\32\26\0\3\32\5\0\1\32\4\0"+
    "\11\32\1\373\17\32\26\0\3\32\5\0\1\32\4\0"+
    "\20\32\1\374\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\375\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\11\32\1\376\17\32\26\0\3\32\5\0\1\32\4\0"+
    "\3\32\1\377\25\32\26\0\3\32\5\0\1\32\4\0"+
    "\20\32\1\u0100\10\32\26\0\3\32\5\0\1\32\4\0"+
    "\3\32\1\u0101\25\32\26\0\3\32\5\0\1\32\4\0"+
    "\10\32\1\u0102\20\32\26\0\3\32\5\0\1\32\4\0"+
    "\25\32\1\u0103\3\32\26\0\3\32\5\0\1\32\4\0"+
    "\21\32\1\u0104\7\32\26\0\3\32\5\0\1\32\4\0"+
    "\22\32\1\u0105\6\32\26\0\3\32\5\0\1\32\4\0"+
    "\5\32\1\u0106\23\32\15\0\1\264\104\0\3\32\5\0"+
    "\1\32\4\0\1\32\1\u0107\27\32\26\0\3\32\5\0"+
    "\1\32\4\0\1\32\1\u0108\27\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u0109\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\13\32\1\u010a\15\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u010b\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\4\32\1\u010c\24\32\26\0\3\32\5\0"+
    "\1\32\4\0\13\32\1\u010d\15\32\26\0\3\32\5\0"+
    "\1\32\4\0\14\32\1\u010e\14\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u010f\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u0110\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\6\32\1\u0111\22\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0112\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\7\32\1\u0113\21\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u0114\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\u0115\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\u0116\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u0117\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\u0118\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u0119\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\10\32\1\u011a\20\32\26\0\3\32\5\0"+
    "\1\32\4\0\20\32\1\u011b\10\32\26\0\3\32\5\0"+
    "\1\32\4\0\21\32\1\u011c\7\32\26\0\3\32\5\0"+
    "\1\32\4\0\11\32\1\u011d\17\32\26\0\3\32\5\0"+
    "\1\32\4\0\11\32\1\u011e\17\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\u011f\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u0120\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\23\32\1\356\5\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u0121\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\21\32\1\u0122\7\32\26\0\3\32\5\0"+
    "\1\32\4\0\27\32\1\u0123\1\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0124\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\u0125\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\1\32\1\u0126\27\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0127\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0128\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u0129\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\6\32\1\u012a\22\32\26\0\3\32\5\0"+
    "\1\32\4\0\16\32\1\u012b\12\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u012c\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\13\32\1\u012d\15\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u012e\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u012f\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0130\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\3\32\1\u0131\25\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0132\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\17\32\1\u0133\11\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u0134\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\15\32\1\u0135\13\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0136\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u0137\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\16\32\1\u0138\12\32\26\0\3\32\5\0"+
    "\1\32\4\0\5\32\1\u0139\23\32\26\0\3\32\5\0"+
    "\1\32\4\0\4\32\1\u013a\24\32\26\0\3\32\5\0"+
    "\1\32\4\0\11\32\1\u013b\17\32\26\0\3\32\5\0"+
    "\1\32\4\0\22\32\1\u013c\6\32\26\0\3\32\5\0"+
    "\1\32\4\0\21\32\1\u013d\7\32\26\0\3\32\5\0"+
    "\1\32\4\0\6\32\1\u013e\22\32\26\0\3\32\5\0"+
    "\1\32\4\0\30\32\1\u013f\26\0\3\32\5\0\1\32"+
    "\4\0\5\32\1\u0140\23\32\26\0\3\32\5\0\1\32"+
    "\4\0\4\32\1\u0141\24\32\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\2\1\3\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\4\1\2\11"+
    "\21\1\1\11\1\1\4\11\2\1\1\11\1\1\11\11"+
    "\2\0\7\11\45\1\5\11\1\1\10\11\10\1\1\0"+
    "\54\1\3\11\1\0\5\11\52\1\1\11\1\0\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[321];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    class LexingError extends java.io.IOException {
        LexingError(String str) {
            super(str);
        }
    }
    private Symbol symbol(int id) {
        return new Symbol(id);
    }
    private Symbol symbol(int id, Object value) {
        return new Symbol(id, value);
    }

    StringBuffer readString = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new LexingError("Invalid token encountered");
            }
            // fall through
          case 117: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 118: break;
          case 3:
            { return symbol(sym.NOT);
            }
            // fall through
          case 119: break;
          case 4:
            { readString.delete(0, readString.length()); yybegin(STRINGLITERAL);
            }
            // fall through
          case 120: break;
          case 5:
            { return symbol(sym.MODULO);
            }
            // fall through
          case 121: break;
          case 6:
            { return symbol(sym.AND);
            }
            // fall through
          case 122: break;
          case 7:
            { yybegin(CHARLITERAL);
            }
            // fall through
          case 123: break;
          case 8:
            { return symbol(sym.LEFT_PAREN);
            }
            // fall through
          case 124: break;
          case 9:
            { return symbol(sym.RIGHT_PAREN);
            }
            // fall through
          case 125: break;
          case 10:
            { return symbol(sym.STAR);
            }
            // fall through
          case 126: break;
          case 11:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 127: break;
          case 12:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 128: break;
          case 13:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 129: break;
          case 14:
            { return symbol(sym.DOT);
            }
            // fall through
          case 130: break;
          case 15:
            { return symbol(sym.DIVIDE);
            }
            // fall through
          case 131: break;
          case 16:
            { return symbol(sym.NON_NEGATIVE_INT_VAL, yytext());
            }
            // fall through
          case 132: break;
          case 17:
            { throw new LexingError(": not supported");
            }
            // fall through
          case 133: break;
          case 18:
            { return symbol(sym.SEMICOLON);
            }
            // fall through
          case 134: break;
          case 19:
            { return symbol(sym.LESS_THAN);
            }
            // fall through
          case 135: break;
          case 20:
            { return symbol(sym.ASSIGNMENT_OPERATOR);
            }
            // fall through
          case 136: break;
          case 21:
            { return symbol(sym.GREATER_THAN);
            }
            // fall through
          case 137: break;
          case 22:
            { return symbol(sym.ID, yytext());
            }
            // fall through
          case 138: break;
          case 23:
            { return symbol(sym.LEFT_SQUARE_BRACKET);
            }
            // fall through
          case 139: break;
          case 24:
            { return symbol(sym.RIGHT_SQUARE_BRACKET);
            }
            // fall through
          case 140: break;
          case 25:
            { return symbol(sym.LEFT_CURLY_BRACE);
            }
            // fall through
          case 141: break;
          case 26:
            { return symbol(sym.OR);
            }
            // fall through
          case 142: break;
          case 27:
            { return symbol(sym.RIGHT_CURLY_BRACE);
            }
            // fall through
          case 143: break;
          case 28:
            { readString.append(yytext());
            }
            // fall through
          case 144: break;
          case 29:
            { throw new LexingError("String is not properly terminated");
            }
            // fall through
          case 145: break;
          case 30:
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, readString.toString());
            }
            // fall through
          case 146: break;
          case 31:
            { throw new LexingError("char is not properly terminated");
            }
            // fall through
          case 147: break;
          case 32:
            { return symbol(sym.NOT_EQUAL);
            }
            // fall through
          case 148: break;
          case 33:
            { throw new LexingError("%= not supported");
            }
            // fall through
          case 149: break;
          case 34:
            { throw new LexingError("&= not supported");
            }
            // fall through
          case 150: break;
          case 35:
            { throw new LexingError("*= not supported");
            }
            // fall through
          case 151: break;
          case 36:
            { throw new LexingError("++ not supported");
            }
            // fall through
          case 152: break;
          case 37:
            { throw new LexingError("+= not supported");
            }
            // fall through
          case 153: break;
          case 38:
            { throw new LexingError("-- not supported");
            }
            // fall through
          case 154: break;
          case 39:
            { throw new LexingError("-= not supported");
            }
            // fall through
          case 155: break;
          case 40:
            { throw new LexingError("/= not supported");
            }
            // fall through
          case 156: break;
          case 41:
            { throw new LexingError("<< not supported");
            }
            // fall through
          case 157: break;
          case 42:
            { return symbol(sym.LESS_THAN_OR_EQUAL);
            }
            // fall through
          case 158: break;
          case 43:
            { return symbol(sym.DOUBLE_EQUALS);
            }
            // fall through
          case 159: break;
          case 44:
            { return symbol(sym.GREATER_THAN_OR_EQUAL);
            }
            // fall through
          case 160: break;
          case 45:
            { throw new LexingError(">> not supported");
            }
            // fall through
          case 161: break;
          case 46:
            { throw new LexingError("^= not supported");
            }
            // fall through
          case 162: break;
          case 47:
            { throw new LexingError("do Java token not supported by JOOS");
            }
            // fall through
          case 163: break;
          case 48:
            { return symbol(sym.IF);
            }
            // fall through
          case 164: break;
          case 49:
            { throw new LexingError("|= not supported");
            }
            // fall through
          case 165: break;
          case 50:
            { throw new LexingError("Illegal escape char in string");
            }
            // fall through
          case 166: break;
          case 51:
            { readString.append('\"');
            }
            // fall through
          case 167: break;
          case 52:
            { readString.append('\'');
            }
            // fall through
          case 168: break;
          case 53:
            { /* octalescapes */
                                String cur = yytext().substring(1, yytext().length());
                                int val = Integer.parseInt(cur, 8);
                                if (val > 255) {
                                     cur = yytext().substring(1, yytext().length()-1);
                                     val = Integer.parseInt(cur, 8);
                                     readString.append((char)val);
                                     readString.append(yytext().substring(3, 4));
                                } else {
                                    readString.append((char)val);
                                }
            }
            // fall through
          case 169: break;
          case 54:
            { readString.append('\\');
            }
            // fall through
          case 170: break;
          case 55:
            { readString.append('\b');
            }
            // fall through
          case 171: break;
          case 56:
            { readString.append('\f');
            }
            // fall through
          case 172: break;
          case 57:
            { readString.append('\n');
            }
            // fall through
          case 173: break;
          case 58:
            { readString.append('\r');
            }
            // fall through
          case 174: break;
          case 59:
            { readString.append('\t');
            }
            // fall through
          case 175: break;
          case 60:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, yytext().charAt(0));
            }
            // fall through
          case 176: break;
          case 61:
            { throw new LexingError("Illegal escape char");
            }
            // fall through
          case 177: break;
          case 62:
            { return symbol(sym.FOR);
            }
            // fall through
          case 178: break;
          case 63:
            { return symbol(sym.INT);
            }
            // fall through
          case 179: break;
          case 64:
            { return symbol(sym.NEW);
            }
            // fall through
          case 180: break;
          case 65:
            { throw new LexingError("try token not supported by JOOS");
            }
            // fall through
          case 181: break;
          case 66:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\\');
            }
            // fall through
          case 182: break;
          case 67:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\'');
            }
            // fall through
          case 183: break;
          case 68:
            { /* octalescapes */
                                yybegin(YYINITIAL);
                                int val = Integer.parseInt(yytext().substring(1, yytext().length()-1), 8);
                                if (0 <= val && val <= 255) {
                                     return symbol(sym.CHAR_LITERAL, (char)val);
                                }
                                throw new LexingError("invalid octal number");
            }
            // fall through
          case 184: break;
          case 69:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\b');
            }
            // fall through
          case 185: break;
          case 70:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\f');
            }
            // fall through
          case 186: break;
          case 71:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\n');
            }
            // fall through
          case 187: break;
          case 72:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\r');
            }
            // fall through
          case 188: break;
          case 73:
            { yybegin(YYINITIAL); return symbol(sym.CHAR_LITERAL, '\t');
            }
            // fall through
          case 189: break;
          case 74:
            { return symbol(sym.BYTE);
            }
            // fall through
          case 190: break;
          case 75:
            { throw new LexingError("case Java token not supported by JOOS");
            }
            // fall through
          case 191: break;
          case 76:
            { return symbol(sym.CHAR);
            }
            // fall through
          case 192: break;
          case 77:
            { return symbol(sym.ELSE);
            }
            // fall through
          case 193: break;
          case 78:
            { throw new LexingError("goto token not supported by JOOS");
            }
            // fall through
          case 194: break;
          case 79:
            { throw new LexingError("long token not supported by JOOS");
            }
            // fall through
          case 195: break;
          case 80:
            { return symbol(sym.NULL);
            }
            // fall through
          case 196: break;
          case 81:
            { return symbol(sym.THIS);
            }
            // fall through
          case 197: break;
          case 82:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 198: break;
          case 83:
            { return symbol(sym.VOID);
            }
            // fall through
          case 199: break;
          case 84:
            { throw new LexingError("break Java token not supported by JOOS");
            }
            // fall through
          case 200: break;
          case 85:
            { return symbol(sym.CLASS);
            }
            // fall through
          case 201: break;
          case 86:
            { return symbol(sym.CONST);
            }
            // fall through
          case 202: break;
          case 87:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 203: break;
          case 88:
            { return symbol(sym.FINAL);
            }
            // fall through
          case 204: break;
          case 89:
            { throw new LexingError("float Java token not supported by JOOS");
            }
            // fall through
          case 205: break;
          case 90:
            { return symbol(sym.SHORT);
            }
            // fall through
          case 206: break;
          case 91:
            { return symbol(sym.SUPER);
            }
            // fall through
          case 207: break;
          case 92:
            { throw new LexingError("throw token not supported by JOOS");
            }
            // fall through
          case 208: break;
          case 93:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 209: break;
          case 94:
            { throw new LexingError("continue Java token not supported by JOOS");
            }
            // fall through
          case 210: break;
          case 95:
            { return symbol(sym.IMPORT);
            }
            // fall through
          case 211: break;
          case 96:
            { return symbol(sym.NATIVE);
            }
            // fall through
          case 212: break;
          case 97:
            { return symbol(sym.PUBLIC);
            }
            // fall through
          case 213: break;
          case 98:
            { return symbol(sym.RETURN) ;
            }
            // fall through
          case 214: break;
          case 99:
            { return symbol(sym.STATIC);
            }
            // fall through
          case 215: break;
          case 100:
            { throw new LexingError("switch token not supported by JOOS");
            }
            // fall through
          case 216: break;
          case 101:
            { throw new LexingError("throws token not supported by JOOS");
            }
            // fall through
          case 217: break;
          case 102:
            { return symbol(sym.BOOLEAN);
            }
            // fall through
          case 218: break;
          case 103:
            { return symbol(sym.DEFAULT);
            }
            // fall through
          case 219: break;
          case 104:
            { return symbol(sym.EXTENDS);
            }
            // fall through
          case 220: break;
          case 105:
            { throw new LexingError("finally Java token not supported by JOOS");
            }
            // fall through
          case 221: break;
          case 106:
            { return symbol(sym.PACKAGE);
            }
            // fall through
          case 222: break;
          case 107:
            { return symbol(sym.PRIVATE);
            }
            // fall through
          case 223: break;
          case 108:
            { return symbol(sym.ABSTRACT);
            }
            // fall through
          case 224: break;
          case 109:
            { throw new LexingError("strictfp token not supported by JOOS");
            }
            // fall through
          case 225: break;
          case 110:
            { throw new LexingError("volatile token not supported by JOOS");
            }
            // fall through
          case 226: break;
          case 111:
            { return symbol(sym.INTERFACE);
            }
            // fall through
          case 227: break;
          case 112:
            { return symbol(sym.PROTECTED);
            }
            // fall through
          case 228: break;
          case 113:
            { throw new LexingError("transient token not supported by JOOS");
            }
            // fall through
          case 229: break;
          case 114:
            { return symbol(sym.IMPLEMENTS);
            }
            // fall through
          case 230: break;
          case 115:
            { return symbol(sym.INSTANCEOF);
            }
            // fall through
          case 231: break;
          case 116:
            { throw new LexingError("synchronized token not supported by JOOS");
            }
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
